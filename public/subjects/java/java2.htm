<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Comprehensive Java Quiz</title>
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Segoe UI', sans-serif;
            background-color: #0d1117;
            color: #ffffff;
            text-align: center;
            padding: 20px;
            margin: 0;
        }

        #quiz-container {
            background: rgba(30, 41, 59, 0.9);
            width: 90%;
            max-width: 700px;
            margin: 50px auto;
            padding: 30px;
            border-radius: 16px;
            box-shadow: 0 0 30px rgba(0, 255, 255, 0.15);
            animation: fadeIn 0.5s ease;
        }

        h1 {
            color: #06b6d4;
            font-size: 2.2em;
            margin-bottom: 20px;
        }

        #question-text {
            font-size: 1.3em;
            margin: 25px 0;
            color: #eeeeee;
            white-space: pre-wrap;
            text-align: left;
        }

        #question-text code {
            display: block;
            background-color: #1e293b;
            padding: 15px;
            border-radius: 8px;
            font-family: 'Courier New', monospace;
            font-size: 0.9em;
            color: #d1d5db;
            margin-top: 10px;
        }

        #options-container button {
            display: block;
            width: 100%;
            max-width: 500px;
            margin: 10px auto;
            padding: 14px 20px;
            font-size: 1em;
            border: 1px solid #374151;
            border-radius: 10px;
            background-color: #1e293b;
            color: #d1d5db;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        #options-container button:hover:not(:disabled) {
            background-color: #2563eb;
            color: #fff;
            transform: translateY(-2px);
            box-shadow: 0 0 10px #3b82f6;
        }

        #options-container button:disabled {
            cursor: not-allowed;
            opacity: 0.5;
        }

        .correct {
            background-color: #10b981 !important;
            color: white !important;
            box-shadow: 0 0 10px #10b981;
        }

        .wrong {
            background-color: #ef4444 !important;
            color: white !important;
            box-shadow: 0 0 10px #ef4444;
        }

        #next-btn, #restart-btn {
            padding: 12px 28px;
            font-size: 1em;
            background-color: #06b6d4;
            color: white;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            margin-top: 25px;
            transition: background-color 0.3s, transform 0.2s;
        }

        #next-btn:hover, #restart-btn:hover {
            background-color: #0ea5e9;
            transform: translateY(-2px);
            box-shadow: 0 0 10px #0ea5e8;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @media (max-width: 600px) {
            #quiz-container {
                padding: 20px;
            }

            h1 {
                font-size: 1.8em;
            }

            #question-text {
                font-size: 1.1em;
            }

            #next-btn, #restart-btn {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <h1>Comprehensive Java Quiz</h1>
    <div id="quiz-container">
        <p id="question-number" aria-live="polite"></p>
        <p id="progress-display" aria-live="polite"></p>
        <p id="score-display" aria-live="polite">Score: 0 / 0</p>
        <p id="question-text" aria-live="assertive"></p>
        <div id="options-container"></div>
        <button id="next-btn" style="display: none;">Next</button>
        <button id="restart-btn" style="display: none;">Restart Quiz</button>
    </div>
    <script>
        const allQuestions = [
            {
                id: 1,
                question: "Which program translates Java source code into bytecode?",
                options: ["Java Virtual Machine", "Java Runtime Environment", "Java Compiler", "Java Debugger"],
                correctAnswer: 2,
                subject: "Java"
            },
            {
                id: 2,
                question: "Which of the following is a valid identifier in Java?",
                options: ["1variable", "my-variable", "_myVariable", "void"],
                correctAnswer: 2,
                subject: "Java"
            },
            {
                id: 3,
                question: "What is the default value of a boolean variable in Java?",
                options: ["TRUE", "FALSE", "null", "0"],
                correctAnswer: 1,
                subject: "Java"
            },
            {
                id: 4,
                question: "Which statement is used to exit a loop prematurely in Java?",
                options: ["continue", "pass", "break", "exit"],
                correctAnswer: 2,
                subject: "Java"
            },
            {
                id: 5,
                question: "How do you determine the number of elements in an array named data in Java?",
                options: ["data.length()", "length(data)", "data.size()", "data.length"],
                correctAnswer: 3,
                subject: "Java"
            },
            {
                id: 6,
                question: "What will be the output of System.out.println(\"Hello\".charAt(0));?",
                options: ["H", "e", "l", "o"],
                correctAnswer: 0,
                subject: "Java"
            },
            {
                id: 7,
                question: "Which keyword is used to create an instance of a class in Java?",
                options: ["class", "new", "object", "instance"],
                correctAnswer: 1,
                subject: "Java"
            },
            {
                id: 8,
                question: "What happens if you don't define any constructor in a Java class?",
                options: ["Compilation error", "The program runs with default values", "A default constructor is automatically provided", "An exception is thrown at runtime"],
                correctAnswer: 2,
                subject: "Java"
            },
            {
                id: 9,
                question: "Which keyword prevents a class from being subclassed in Java?",
                options: ["static", "final", "abstract", "private"],
                correctAnswer: 1,
                subject: "Java"
            },
            {
                id: 10,
                question: "What is the purpose of the instanceof operator in Java?",
                options: ["To check if two objects are equal", "To determine the class of an object", "To check if an object is an instance of a particular class or interface", "To convert an object to another type"],
                correctAnswer: 2,
                subject: "Java"
            },
            {
                id: 11,
                question: "What is the value of result after executing the following Java code?\n\n```java\npublic class DivisionExample {\n    public static void main(String[] args) {\n        // Declare and initialize integer variables\n        int x = 8;\n        int y = 3;\n\n        // Perform division with cast to double\n        double result = (double) x / y;\n\n        // Output the result (approximately 2.666...)\n        System.out.println(result);\n    }\n}\n```",
                options: ["2", "2.0", "2.666...", "3"],
                correctAnswer: 2,
                subject: "Java"
            },
            {
                id: 12,
                question: "How many times will the inner loop execute in the following nested loop?\n\n```java\npublic class NestedLoopExample {\n    public static void main(String[] args) {\n        // Outer loop runs 3 times\n        for (int i = 0; i < 3; i++) {\n            // Inner loop runs 4 times per outer iteration\n            for (int j = 0; j < 4; j++) {\n                System.out.print(\"*\");\n            }\n            System.out.println();\n        }\n    }\n}\n```",
                options: ["3", "4", "7", "12"],
                correctAnswer: 3,
                subject: "Java"
            },
            {
                id: 13,
                question: "What is the output of String str1 = \"apple\"; String str2 = \"Apple\"; System.out.println(str1.equals(str2));?",
                options: ["TRUE", "FALSE", "0", "1"],
                correctAnswer: 1,
                subject: "Java"
            },
            {
                id: 14,
                question: "What is the scope of an instance variable in Java?",
                options: ["Within the method it is declared", "Within the class it is declared", "Within the package", "Globally accessible"],
                correctAnswer: 1,
                subject: "Java"
            },
            {
                id: 15,
                question: "Which of the following is an example of constructor overloading?",
                options: ["Two constructors with the same name and same parameters", "Two constructors with different names in the same class", "Two constructors with the same name but different parameter lists", "A constructor with the same name as a method"],
                correctAnswer: 2,
                subject: "Java"
            },
            {
                id: 16,
                question: "If a subclass overrides a method from its superclass, which method is called when an object of the subclass is used?",
                options: ["The superclass's method", "The subclass's method", "It depends on the casting", "Both methods are called"],
                correctAnswer: 1,
                subject: "Java"
            },
            {
                id: 17,
                question: "What is the output of the following Java code?\n\n```java\nabstract class Shape {\n    abstract double area();\n}\nclass Circle extends Shape {\n    double radius;\n    public Circle(double r) {\n        radius = r;\n    }\n    public double area() {\n        return Math.PI * radius * radius;\n    }\n}\npublic class CircleAreaExample {\n    public static void main(String[] args) {\n        // Create a Circle with radius 5\n        Shape s = new Circle(5);\n        // Output the area\n        System.out.println(s.area());\n    }\n}\n```",
                options: ["0", "78.539...", "Compilation error", "Runtime error"],
                correctAnswer: 1,
                subject: "Java"
            },
            {
                id: 18,
                question: "Which of the following is a checked exception in Java?",
                options: ["ArrayIndexOutOfBoundsException", "NullPointerException", "IOException", "ArithmeticException"],
                correctAnswer: 2,
                subject: "Java"
            },
            {
                id: 19,
                question: "What is the purpose of the finally block in a try-catch statement?",
                options: ["To handle the exception", "To declare potential exceptions", "To execute code regardless of whether an exception is thrown or caught", "To define custom exceptions"],
                correctAnswer: 2,
                subject: "Java"
            },
            {
                id: 20,
                question: "Which method of the StringTokenizer class is used to get the next token from the string?",
                options: ["nextToken()", "getToken()", "nextString()", "readToken()"],
                correctAnswer: 0,
                subject: "Java"
            },
            {
                id: 21,
                question: "Which two components are essential for running a Java program?",
                options: ["Java Compiler and JVM", "JVM and Java Runtime Environment", "JDK and Java Compiler", "IDE and JVM"],
                correctAnswer: 1,
                subject: "Java"
            },
            {
                id: 22,
                question: "Which of the following pairs represents a primitive data type and a non-primitive data type in Java?",
                options: ["int, boolean", "String, char", "float, double", "int, String"],
                correctAnswer: 3,
                subject: "Java"
            },
            {
                id: 23,
                question: "Which of the following control flow statements allows you to skip the rest of the current iteration and proceed to the next iteration of a loop?",
                options: ["break", "continue", "return", "exit"],
                correctAnswer: 1,
                subject: "Java"
            },
            {
                id: 24,
                question: "How do you access the element at the third row and second column of a two-dimensional array named data?",
                options: ["data[3][2]", "data[2][1]", "data(3, 2)", "data[1][2]"],
                correctAnswer: 1,
                subject: "Java"
            },
            {
                id: 25,
                question: "Consider the expression `true && false || true`. What is the result of this expression in Java?\n\n```java\npublic class BooleanExpressionExample {\n    public static void main(String[] args) {\n        // Evaluate the boolean expression\n        boolean result = true && false || true;\n        // Output the result\n        System.out.println(result);\n    }\n}\n```",
                options: ["TRUE", "FALSE", "1", "0"],
                correctAnswer: 0,
                subject: "Java"
            },
            {
                id: 26,
                question: "What will be the final value of x after the following code executes?\n\n```java\npublic class ContinueLoopExample {\n    public static void main(String[] args) {\n        // Initialize x\n        int x = 0;\n        // Loop 5 times\n        for (int i = 0; i < 5; i++) {\n            // Skip even indices\n            if (i % 2 == 0) {\n                continue;\n            }\n            // Increment x for odd indices\n            x++;\n        }\n        // Output x\n        System.out.println(x);\n    }\n}\n```",
                options: ["0", "1", "2", "3"],
                correctAnswer: 3,
                subject: "Java"
            },
            {
                id: 27,
                question: "Which of the following methods can be used to compare two String objects for equality, considering the case?",
                options: ["equals()", "equalsIgnoreCase()", "compareTo()", "#ERROR!"],
                correctAnswer: 0,
                subject: "Java"
            },
            {
                id: 28,
                question: "What is the primary difference between a default constructor and a parameterized constructor in Java?",
                options: ["A default constructor accepts arguments, while a parameterized constructor does not.", "A parameterized constructor is automatically provided if no constructor is defined.", "A default constructor has no parameters, while a parameterized constructor has one or more parameters.", "There is no difference; the terms are interchangeable."],
                correctAnswer: 2,
                subject: "Java"
            },
            {
                id: 29,
                question: "Consider the following inheritance hierarchy: class A {} class B extends A {} class C extends B {}. If you have an object obj of class C, which of the following assignments are valid in Java? (Select two)",
                options: ["A a = obj;", "B b = new A();", "C c = new B();", "Object o = obj;"],
                correctAnswer: 0, // Note: Both 0 and 3 are correct, but quiz supports single answer
                subject: "Java"
            },
            {
                id: 30,
                question: "Which of the following statements correctly describes the order of execution of try, catch, and finally blocks in Java exception handling?",
                options: ["try -> catch -> finally (always)", "try -> finally (if no exception) or try -> catch -> finally (if exception caught)", "try -> catch (if exception) or finally (always)", "try -> (catch or finally, only one)"],
                correctAnswer: 1,
                subject: "Java"
            },
            {
                id: 31,
                question: "What is the purpose of the if-else statement in Java?",
                options: ["To define a loop", "To handle exceptions", "To make decisions based on a condition", "To declare variables"],
                correctAnswer: 2,
                subject: "Java"
            },
            {
                id: 32,
                question: "How do you access the length of a one-dimensional array named arr in Java?",
                options: ["arr.size", "arr.length()", "length(arr)", "arr.length"],
                correctAnswer: 3,
                subject: "Java"
            },
            {
                id: 33,
                question: "What will be the output of the following code?\n\n```java\npublic class PostIncrementExample {\n    public static void main(String[] args) {\n        // Initialize a\n        int a = 5;\n        // Post-increment and multiply\n        System.out.println(a++ * 2);\n    }\n}\n```",
                options: ["10", "12", "8", "11"],
                correctAnswer: 0,
                subject: "Java"
            },
            {
                id: 34,
                question: "How many times will the following loop execute?\n\n```java\npublic class DecrementLoopExample {\n    public static void main(String[] args) {\n        // Loop from 10 to 5, decrement by 2\n        for (int i = 10; i >= 5; i -= 2) {\n            System.out.print(i + \" \");\n        }\n    }\n}\n```",
                options: ["3", "4", "5", "6"],
                correctAnswer: 3,
                subject: "Java"
            },
            {
                id: 35,
                question: "Which of the following methods creates a new String object by concatenating another String to the end of the original String?",
                options: ["append()", "concat()", "join()", "merge()"],
                correctAnswer: 1,
                subject: "Java"
            },
            {
                id: 36,
                question: "What is the significance of the static keyword when applied to a variable in a Java class?",
                options: ["It makes the variable accessible only within the method.", "It means the variable belongs to the class itself, not to any specific instance.", "It prevents the variable's value from being changed.", "It makes the variable available to subclasses only."],
                correctAnswer: 1,
                subject: "Java"
            },
            {
                id: 37,
                question: "What will be the output of the following code?\n\n```java\nclass Parent {\n    public void display() {\n        System.out.println(\"Parent\");\n    }\n}\nclass Child extends Parent {\n    public void display() {\n        System.out.println(\"Child\");\n    }\n}\npublic class InheritanceExample {\n    public static void main(String[] args) {\n        // Create Child object with Parent reference\n        Parent p = new Child();\n        // Call display method\n        p.display();\n    }\n}\n```",
                options: ["Parent", "Child", "Compilation error", "No output"],
                correctAnswer: 1,
                subject: "Java"
            },
            {
                id: 38,
                question: "Which of the following is a characteristic of a checked exception in Java?",
                options: ["It occurs due to programming errors.", "The compiler forces you to handle or declare it.", "It is a subclass of RuntimeException.", "Examples include NullPointerException and ArrayIndexOutOfBoundsException."],
                correctAnswer: 1,
                subject: "Java"
            },
            {
                id: 39,
                question: "Which of the following is a key feature of Java that allows it to run on different operating systems?",
                options: ["Just Compile Once, Run Anywhere (JCORA)", "Write Once, Run Anywhere (WORA)", "Compile Anywhere, Run Everywhere (CARE)", "Develop Everywhere, Run Anywhere (DERA)"],
                correctAnswer: 1,
                subject: "Java"
            },
            {
                id: 40,
                question: "Which symbol is used for single-line comments in Java?",
                options: ["//", "/* */", "#", "--"],
                correctAnswer: 0,
                subject: "Java"
            },
            {
                id: 41,
                question: "What is the range of the int data type in Java?",
                options: ["-128 to 127", "-32,768 to 32,767", "-2,147,483,648 to 2,147,483,647", "0 to 65,535"],
                correctAnswer: 2,
                subject: "Java"
            },
            {
                id: 42,
                question: "Which loop is best suited for iterating a known number of times?",
                options: ["while loop", "do-while loop", "for loop", "if-else statement"],
                correctAnswer: 2,
                subject: "Java"
            },
            {
                id: 43,
                question: "How do you declare a two-dimensional integer array named grid with 3 rows and 4 columns?",
                options: ["int grid[3][4];", "int[3][4] grid = new int();", "int[][] grid = new int[3][4];", "int grid = new int[3, 4];"],
                correctAnswer: 2,
                subject: "Java"
            },
            {
                id: 44,
                question: "What will be the output of System.out.println(\"Java\".length());?",
                options: ["3", "4", "5", "6"],
                correctAnswer: 1,
                subject: "Java"
            },
            {
                id: 45,
                question: "Can a class have multiple constructors in Java?",
                options: ["No", "Yes, but only biscif they have different names", "Yes, if they have different parameter lists", "Yes, if they have different access modifiers"],
                correctAnswer: 2,
                subject: "Java"
            },
            {
                id: 46,
                question: "Which keyword is used to access a static member of a class?",
                options: ["this", "super", "class", "class name"],
                correctAnswer: 3,
                subject: "Java"
            },
            {
                id: 47,
                question: "What type of inheritance is NOT directly supported in Java through classes?",
                options: ["Single inheritance", "Multiple inheritance", "Hierarchical inheritance", "Multilevel inheritance"],
                correctAnswer: 1,
                subject: "Java"
            },
            {
                id: 48,
                question: "What is the purpose of the final keyword when used with a method?",
                options: ["The method can be overridden", "The method cannot be overridden", "The method can only be accessed within the class", "The method is a static method"],
                correctAnswer: 1,
                subject: "Java"
            },
            {
                id: 49,
                question: "Evaluate the expression: 5 + 2 * 3 - 1. What is the result?",
                options: ["10", "16", "12", "20"],
                correctAnswer: 0,
                subject: "Java"
            },
            {
                id: 50,
                question: "What will be the output of the following code snippet?\n\n```java\npublic class WhileContinueExample {\n    public static void main(String[] args) {\n        // Initialize i\n        int i = 0;\n        // Loop while i < 5\n        while (i < 5) {\n            System.out.print(i + \" \");\n            i++;\n            // Skip i == 3\n            if (i == 3) continue;\n        }\n    }\n}\n```",
                options: ["0 1 2 3 4", "0 1 2 4", "0 1 2 3", "3"],
                correctAnswer: 1,
                subject: "Java"
            },
            {
                id: 51,
                question: "What is the result of String str = \"programming\"; System.out.println(str.indexOf(\"gram\"));?",
                options: ["2", "3", "4", "-1"],
                correctAnswer: 2,
                subject: "Java"
            },
            {
                id: 52,
                question: "What is the difference between instance variables and static variables?",
                options: ["Instance variables are shared by all objects, while static variables are unique to each object.", "Static variables are shared by all objects, while instance variables are unique to each object.", "There is no difference between them.", "Instance variables are declared with static, while static variables are not."],
                correctAnswer: 1,
                subject: "Java"
            },
            {
                id: 53,
                question: "Consider a class Calculator with two constructors: Calculator() and Calculator(int x). This is an example of:",
                options: ["Method overriding", "Constructor chaining", "Constructor overloading", "Method hiding"],
                correctAnswer: 2,
                subject: "Java"
            },
            {
                id: 54,
                question: "A subclass Dog extends a superclass Animal. If both have a method eat(), which method is called when dogObj.eat() is executed?",
                options: ["The Animal class's eat() method", "The Dog class's eat() method", "It depends on the casting of dogObj", "Both methods are executed"],
                correctAnswer: 1,
                subject: "Java"
            },
            {
                id: 55,
                question: "Which of the following is a valid way to implement multiple inheritance-like behavior in Java?",
                options: ["By extending multiple classes", "By implementing multiple interfaces", "By using inner classes", "By using abstract classes"],
                correctAnswer: 1,
                subject: "Java"
            },
            {
                id: 56,
                question: "What is the purpose of the throws keyword in a method signature?",
                options: ["To throw a new exception", "To declare the exceptions that the method might throw", "To handle exceptions within the method", "To define a custom exception"],
                correctAnswer: 1,
                subject: "Java"
            },
            {
                id: 57,
                question: "What will be the state of the program if an exception is thrown in a try block, there is a matching catch block, and the catch block itself throws another exception?",
                options: ["The program terminates immediately.", "The finally block (if present) is executed, and then the program terminates due to the new exception.", "The original exception is re-thrown after the catch block.", "The program continues execution after the catch block."],
                correctAnswer: 1,
                subject: "Java"
            },
            {
                id: 58,
                question: "Which of the following classes can be used to read data byte by byte from a file?",
                options: ["FileReader", "BufferedReader", "FileInputStream", "FileWriter"],
                correctAnswer: 2,
                subject: "Java"
            },
            {
                id: 59,
                question: "Which of the following is the correct way to declare an integer variable named count and initialize it with the value 10?",
                options: ["int count = 10;", "integer count = 10;", "count int = 10;", "count = 10 int;"],
                correctAnswer: 0,
                subject: "Java"
            },
            {
                id: 60,
                question: "Which loop in Java guarantees that the loop body will execute at least once?",
                options: ["for loop", "while loop", "do-while loop", "if statement"],
                correctAnswer: 2,
                subject: "Java"
            },
            {
                id: 61,
                question: "What is the process of converting a primitive data type to its corresponding wrapper class object called?",
                options: ["Boxing", "Unboxing", "Casting", "Type conversion"],
                correctAnswer: 0,
                subject: "Java"
            },
            {
                id: 62,
                question: "Which keyword is used to call the constructor of the superclass from a subclass constructor?",
                options: ["this", "super", "extend", "implements"],
                correctAnswer: 1,
                subject: "Java"
            },
            {
                id: 63,
                question: "What will be the output of the following code?\n\n```java\npublic class IncrementExample {\n    public static void main(String[] args) {\n        // Initialize x\n        int x = 5;\n        // Pre- and post-increment\n        System.out.println(++x + x++);\n    }\n}\n```",
                options: ["10", "11", "12", "13"],
                correctAnswer: 3,
                subject: "Java"
            },
            {
                id: 64,
                question: "What will be printed by the following code?\n\n```java\npublic class OddNumbersExample {\n    public static void main(String[] args) {\n        // Loop from 1 to 5\n        for (int i = 1; i <= 5; i++) {\n            // Print if i is odd\n            if (i % 2 != 0) {\n                System.out.print(i + \" \");\n            }\n        }\n    }\n}\n```",
                options: ["1 2 3 4 5", "2 4", "1 3 5", "5"],
                correctAnswer: 2,
                subject: "Java"
            },
            {
                id: 65,
                question: "Which of the following methods can be used to check if a String ends with a specific suffix?",
                options: ["endsWith()", "suffixEquals()", "checkSuffix()", "isSuffix()"],
                correctAnswer: 0,
                subject: "Java"
            },
            {
                id: 66,
                question: "What is method overloading an example of in Java?",
                options: ["Inheritance", "Polymorphism", "Encapsulation", "Abstraction"],
                correctAnswer: 1,
                subject: "Java"
            },
            {
                id: 67,
                question: "Which of the following is a valid statement for the given interface and class?\n\n```java\ninterface MyInterface {\n    void methodA();\n}\nclass MyClass implements MyInterface {\n    public void methodA() {\n        System.out.println(\"Method A implemented\");\n    }\n    public void methodB() {\n        System.out.println(\"Method B in MyClass\");\n    }\n}\n```",
                options: ["MyInterface obj = new MyInterface();", "MyClass obj = new MyInterface();", "MyInterface obj = new MyClass(); obj.methodB();", "MyInterface obj = new MyClass(); obj.methodA();"],
                correctAnswer: 3,
                subject: "Java"
            },
            {
                id: 68,
                question: "Which of the following is a characteristic of an unchecked exception in Java?",
                options: ["It must be caught or declared.", "It is typically a result of errors that the program cannot reasonably be expected to recover from.", "Examples include IOException and SQLException.", "It is a subclass of Exception but not RuntimeException."],
                correctAnswer: 1,
                subject: "Java"
            },
            {
                id: 69,
                question: "Which of the following is a primary reason Java gained popularity over C++ in the early 2000s?",
                options: ["Platform-dependent compilation", "Lack of memory management", "Built-in garbage collection and platform independence", "Operator overloading capabilities"],
                correctAnswer: 2,
                subject: "Java"
            },
            {
                id: 70,
                question: "Which of the following correctly describes the relationship among JVM, JRE, and JDK?",
                options: ["JDK ⊂ JRE ⊂ JVM", "JVM ⊂ JRE ⊂ JDK", "JRE = JVM + JDK", "JVM = JRE + JDK"],
                correctAnswer: 1,
                subject: "Java"
            },
            {
                id: 71,
                question: "Why is the main method in Java defined as 'public static void main(String[] args)'?",
                options: ["Because Java does not support private methods", "It’s a compiler convention and allows direct execution without object creation", "To restrict access from other packages", "To avoid using return statements"],
                correctAnswer: 1,
                subject: "Java"
            },
            {
                id: 72,
                question: "Which of the following data types can never store decimal values?",
                options: ["float", "double", "int", "long"],
                correctAnswer: 2,
                subject: "Java"
            },
            {
                id: 73,
                question: "Which control statement is ideal when a condition needs to be checked at least once before looping?",
                options: ["for", "while", "do-while", "if-else"],
                correctAnswer: 2,
                subject: "Java"
            },
            {
                id: 74,
                question: "What symbol is used to declare an array in Java?",
                options: ["[]", "{}", "<>", "()"],
                correctAnswer: 0,
                subject: "Java"
            },
            {
                id: 75,
                question: "What makes a jagged array different from a 2D array in Java?",
                options: ["Jagged arrays are always larger in memory", "Jagged arrays have rows of unequal length", "Jagged arrays are not supported in Java", "Jagged arrays can only store strings"],
                correctAnswer: 1,
                subject: "Java"
            },
            {
                id: 76,
                question: "Why are String objects in Java considered immutable?",
                options: ["They cannot be declared final", "String class is abstract", "Once created, their content cannot be changed", "They are stored in the heap only"],
                correctAnswer: 2,
                subject: "Java"
            },
            {
                id: 77,
                question: "Which class is preferred in a single-threaded environment for mutable strings?",
                options: ["StringBuffer", "String", "StringBuilder", "Character"],
                correctAnswer: 2,
                subject: "Java"
            },
            {
                id: 78,
                question: "Which class can be used to split a sentence into words based on a delimiter?",
                options: ["StringBuilder", "StringTokenizer", "Scanner", "StringUtils"],
                correctAnswer: 1,
                subject: "Java"
            },
            {
                id: 79,
                question: "What will be the output if a Java program is executed without passing any command line arguments, but tries to access args[0]?",
                options: ["null", "args[0]", "ArrayIndexOutOfBoundsException", "Compilation error"],
                correctAnswer: 2,
                subject: "Java"
            },
            {
                id: 80,
                question: "Given: int a = 5; int b = a++ + ++a; What is the final value of b?",
                options: ["11", "12", "13", "10"],
                correctAnswer: 1,
                subject: "Java"
            },
            {
                id: 81,
                question: "In a nested loop structure, what effect does a 'continue' statement have when triggered in the inner loop?",
                options: ["Terminates both loops", "Skips only the current iteration of the outer loop", "Skips the current iteration of the inner loop only", "Throws a runtime exception"],
                correctAnswer: 2,
                subject: "Java"
            },
            {
                id: 82,
                question: "If an array is passed to a method and modified inside it, what effect does it have outside the method?",
                options: ["The original array remains unchanged", "A copy of the array is modified", "The original array is modified", "An exception is thrown"],
                correctAnswer: 2,
                subject: "Java"
            },
            {
                id: 83,
                question: "Which of the following correctly compares the *value* of two strings in Java?",
                options: ["str1 = str2", "str1.equals(str2)", "str1 == str2", "compare(str1, str2)"],
                correctAnswer: 1,
                subject: "Java"
            },
            {
                id: 84,
                question: "If a StringBuilder exceeds its current capacity while appending data, what happens internally?",
                options: ["It throws a runtime exception", "It wraps to the next line", "It automatically increases capacity", "It replaces older content with new data"],
                correctAnswer: 2,
                subject: "Java"
            },
            {
                id: 85,
                question: "Which of the following will execute first during the execution of a Java class containing both a static block and a main method?",
                options: ["main() method", "Constructors", "Instance block", "Static block"],
                correctAnswer: 3,
                subject: "Java"
            },
            {
                id: 86,
                question: "What will be the output of the following loop?\n\n```java\npublic class BreakLoopExample {\n    public static void main(String[] args) {\n        // Loop 5 times\n        for(int i = 0; i < 5; i++) {\n            // Break at i == 3\n            if(i == 3) {\n                break;\n            }\n            // Print i\n            System.out.print(i);\n        }\n    }\n}\n```",
                options: ["0123", "012", "123", "01"],
                correctAnswer: 1,
                subject: "Java"
            },
            {
                id: 87,
                question: "What will be the result of comparing two String objects created using new operator with == operator?",
                options: ["true if values are same", "false", "true if references match", "true if hashcodes match"],
                correctAnswer: 2,
                subject: "Java"
            },
            {
                id: 88,
                question: "What is the output of the following code?\n```java\npublic class ArrayInitExample {\n    public static void main(String[] args) {\n        // Declare and initialize array\n        int[] a = new int[3];\n        // Print element at index 2\n        System.out.println(a[2]);\n    }\n}\n```",
                options: ["0", "null", "Garbage value", "Compilation error"],
                correctAnswer: 0,
                subject: "Java"
            },
            {
                id: 89,
                question: "How many objects are created in the following statement?\n\n```java\nString s1 = new String(\"java\";\n```",
                options: ["1", "2", "0", "Depends on the JVM"],
                correctAnswer: 1,
                subject: "Java"
            },{
                id: 90,
                question: "Which of the following statements demonstrates Java autoboxing?",
                options: ["int a = Integer.valueOf(5);", "Integer a = 5;", "Integer a = new Integer(5);", "int a = 5"],
                correctAnswer: 1,
                subject: "Java"
            },
            {
                id: 91,
                question: "Which of the following conditions are valid for method overloading in Java?",
                options: ["Same method name and same parameters", "Same method name, different parameter list", "Different method name and same parameter list", "Changing only return type"],
                correctAnswer: 1,
                subject: "Java"
            },
            {
                id: 92,
                question: "What is the effect of declaring a method as final in a class?",
                options: ["It cannot be called from any subclass", "It cannot be inherited", "It cannot be overridden", "It cannot be compiled"],
                correctAnswer: 2,
                subject: "Java"
            },
            {
                id: 93,
                question: "In Java, if a subclass constructor does not explicitly call a superclass constructor, what happens?",
                options: ["Compilation error", "Default constructor of superclass is called automatically", "Runtime exception is thrown", "It inherits the constructor directly"],
                correctAnswer: 1,
                subject: "Java"
            },
            {
                id: 94,
                question: "What happens if two interfaces implemented by a class contain methods with the same signature but different return types?",
                options: ["Compiler chooses one arbitrarily", "Compiler throws an error", "The method is overridden with void return type", "The class compiles but throws a runtime error"],
                correctAnswer: 1,
                subject: "Java"
            },
            {
                id: 95,
                question: "Which of the following scenarios will **prevent** the 'finally' block from executing?",
                options: ["Exception is thrown but not caught", "System.exit() is called before finally block", "try block executes successfully", "Exception caught in catch block"],
                correctAnswer: 1,
                subject: "Java"
            },
            {
                id: 96,
                question: "Which keyword allows a method to propagate an exception to its caller?",
                options: ["catch", "throw", "throws", "final"],
                correctAnswer: 2,
                subject: "Java"
            },
            {
                id: 97,
                question: "What happens when a class implements two interfaces with default methods having the same signature?",
                options: ["Compiler error due to conflict", "Latest interface overrides previous", "Class must override the conflicting method", "Program runs with both methods"],
                correctAnswer: 2,
                subject: "Java"
            },
            {
                id: 98,
                question: "What is required for valid constructor overloading in Java?",
                options: ["Different return types", "Same name with different parameter lists", "Different access modifiers", "Constructors in separate classes"],
                correctAnswer: 1,
                subject: "Java"
            },
            {
                id: 99,
                question: "What will happen if a Java program tries to access an unavailable command-line argument?",
                options: ["Returns null", "Prints empty string", "Throws ArrayIndexOutOfBoundsException", "Skips the argument"],
                correctAnswer: 2,
                subject: "Java"
            },
            {
                id: 100,
                question: "Which of the following is true about enum in Java?",
                options: ["Enums can extend other classes", "Enums are instances of java.lang.Enum", "Enums can be instantiated directly", "Enums can use multiple inheritance"],
                correctAnswer: 1,
                subject: "Java"
            }
        ]

        let currentQuestionIndex = 0;
        let score = 0;

        const questionNumberEl = document.getElementById("question-number");
        const questionTextEl = document.getElementById("question-text");
        const optionsContainer = document.getElementById("options-container");
        const scoreDisplay = document.getElementById("score-display");
        const progressDisplay = document.getElementById("progress-display");
        const nextBtn = document.getElementById("next-btn");
        const restartBtn = document.getElementById("restart-btn");

        function loadQuestion() {
            const questionObj = allQuestions[currentQuestionIndex];
            questionNumberEl.textContent = `Question ${currentQuestionIndex + 1} of ${allQuestions.length}`;
            progressDisplay.textContent = `Progress: ${Math.round(((currentQuestionIndex + 1) / allQuestions.length) * 100)}%`;
            scoreDisplay.textContent = `Score: ${score} / ${allQuestions.length}`;
            
            // Process question text to wrap code blocks in <code> tags
            const questionText = questionObj.question.replace(/```java\n([\s\S]*?)\n```/, '<code>$1</code>');
            questionTextEl.innerHTML = questionText;
            
            optionsContainer.innerHTML = "";
            nextBtn.style.display = "none";
            restartBtn.style.display = "none";

            questionObj.options.forEach((option, index) => {
                const button = document.createElement("button");
                button.textContent = option;
                button.setAttribute("role", "button");
                button.setAttribute("tabindex", "0");
                button.addEventListener("click", () => selectAnswer(button, index));
                button.addEventListener("keydown", (e) => {
                    if (e.key === "Enter" || e.key === " ") {
                        selectAnswer(button, index);
                    }
                });
                optionsContainer.appendChild(button);
            });
        }

        function selectAnswer(button, index) {
            const buttons = optionsContainer.querySelectorAll("button");
            const correctIndex = Number(allQuestions[currentQuestionIndex].correctAnswer);

            buttons.forEach(btn => btn.disabled = true);

            if (index === correctIndex) {
                button.classList.add("correct");
                score++;
            } else {
                button.classList.add("wrong");
                buttons[correctIndex].classList.add("correct");
            }

            scoreDisplay.textContent = `Score: ${score} / ${allQuestions.length}`;
            if (currentQuestionIndex < allQuestions.length - 1) {
                nextBtn.style.display = "inline-block";
            } else {
                restartBtn.style.display = "inline-block";
            }
        }

        nextBtn.addEventListener("click", () => {
            currentQuestionIndex++;
            if (currentQuestionIndex < allQuestions.length) {
                loadQuestion();
            }
        });

        restartBtn.addEventListener("click", () => {
            currentQuestionIndex = 0;
            score = 0;
            loadQuestion();
        });

        loadQuestion();
    </script>
</body>
</html>